<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>College Analyzer - Side Panel</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
      color: #2c3e50;
      min-height: 100vh;
      overflow-x: hidden;
    }
    
    .header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 20px 16px;
      position: sticky;
      top: 0;
      z-index: 100;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .header h1 {
      font-size: 22px;
      font-weight: 700;
      margin-bottom: 4px;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .header p {
      opacity: 0.9;
      font-size: 14px;
      font-weight: 400;
    }
    
    .container {
      padding: 16px;
      max-width: 100%;
    }
    
    .section {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: 12px;
      padding: 20px;
      margin-bottom: 16px;
      box-shadow: 0 4px 15px rgba(0,0,0,0.1);
      border: 1px solid rgba(255,255,255,0.2);
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    
    .section:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(0,0,0,0.15);
    }
    
    .section h2 {
      font-size: 18px;
      color: #2c3e50;
      margin-bottom: 16px;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .quick-actions {
      display: flex;
      flex-direction: column;
      gap: 10px;
    }
    
    .btn {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      padding: 12px 16px;
      border-radius: 8px;
      cursor: pointer;
      font-size: 14px;
      font-weight: 500;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 8px;
      text-align: left;
    }
    
    .btn:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
    }
    
    .btn:active {
      transform: translateY(0);
    }
    
    .btn.secondary {
      background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    }
    
    .btn.secondary:hover {
      box-shadow: 0 4px 12px rgba(245, 87, 108, 0.3);
    }
    
    .btn.outline {
      background: transparent;
      border: 2px solid #667eea;
      color: #667eea;
    }
    
    .btn.outline:hover {
      background: #667eea;
      color: white;
    }
    
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 12px;
    }
    
    .stat-card {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 16px;
      border-radius: 10px;
      text-align: center;
      position: relative;
      overflow: hidden;
    }
    
    .stat-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(45deg, transparent 0%, rgba(255,255,255,0.1) 50%, transparent 100%);
      transform: translateX(-100%);
      transition: transform 0.6s ease;
    }
    
    .stat-card:hover::before {
      transform: translateX(100%);
    }
    
    .stat-value {
      font-size: 28px;
      font-weight: 700;
      margin-bottom: 4px;
      position: relative;
      z-index: 1;
    }
    
    .stat-label {
      font-size: 12px;
      opacity: 0.9;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      position: relative;
      z-index: 1;
    }
    
    .college-list {
      max-height: 250px;
      overflow-y: auto;
      scrollbar-width: thin;
      scrollbar-color: #667eea #f1f1f1;
    }
    
    .college-list::-webkit-scrollbar {
      width: 6px;
    }
    
    .college-list::-webkit-scrollbar-track {
      background: #f1f1f1;
      border-radius: 3px;
    }
    
    .college-list::-webkit-scrollbar-thumb {
      background: #667eea;
      border-radius: 3px;
    }
    
    .college-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 12px 0;
      border-bottom: 1px solid #e2e8f0;
      transition: background-color 0.2s ease;
    }
    
    .college-item:hover {
      background-color: rgba(102, 126, 234, 0.05);
      border-radius: 6px;
      margin: 0 -8px;
      padding: 12px 8px;
    }
    
    .college-item:last-child {
      border-bottom: none;
    }
    
    .college-info {
      flex: 1;
    }
    
    .college-name {
      font-weight: 600;
      color: #2d3748;
      font-size: 14px;
      margin-bottom: 2px;
    }
    
    .college-location {
      font-size: 12px;
      color: #718096;
    }
    
    .college-status {
      font-size: 11px;
      padding: 4px 8px;
      border-radius: 12px;
      font-weight: 500;
      text-transform: uppercase;
      letter-spacing: 0.3px;
    }
    
    .status-analyzed {
      background: #e6fffa;
      color: #00695c;
    }
    
    .status-saved {
      background: #fff3cd;
      color: #856404;
    }
    
    .status-comparing {
      background: #e3f2fd;
      color: #1565c0;
    }
    
    .search-box {
      width: 100%;
      padding: 12px 16px;
      border: 2px solid #e2e8f0;
      border-radius: 8px;
      font-size: 14px;
      margin-bottom: 16px;
      transition: border-color 0.2s ease;
    }
    
    .search-box:focus {
      outline: none;
      border-color: #667eea;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }
    
    .loading {
      display: none;
      text-align: center;
      padding: 20px;
      color: #718096;
    }
    
    .spinner {
      width: 30px;
      height: 30px;
      border: 3px solid #f3f3f3;
      border-top: 3px solid #667eea;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin: 0 auto 10px;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .empty-state {
      text-align: center;
      padding: 40px 20px;
      color: #718096;
    }
    
    .empty-state-icon {
      font-size: 48px;
      margin-bottom: 16px;
      opacity: 0.5;
    }
    
    .page-detector {
      background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
      color: white;
      padding: 12px 16px;
      border-radius: 8px;
      margin-bottom: 16px;
      font-size: 14px;
      display: none;
    }
    
    .page-detector.active {
      display: block;
    }
    
    .feature-toggle {
      display: flex;
      align-items: center;
      gap: 8px;
      margin-bottom: 12px;
    }
    
    .toggle-switch {
      position: relative;
      width: 44px;
      height: 24px;
      background-color: #ccc;
      border-radius: 12px;
      cursor: pointer;
      transition: background-color 0.3s;
    }
    
    .toggle-switch.active {
      background-color: #667eea;
    }
    
    .toggle-slider {
      position: absolute;
      top: 2px;
      left: 2px;
      width: 20px;
      height: 20px;
      background-color: white;
      border-radius: 50%;
      transition: transform 0.3s;
    }
    
    .toggle-switch.active .toggle-slider {
      transform: translateX(20px);
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>üéì College Analyzer Pro</h1>
    <p>Smart research & analysis tools</p>
  </div>

  <div id="pageDetector" class="page-detector">
    <strong>üìç College page detected!</strong><br>
    <span id="detectedCollege">Ready for analysis</span>
  </div>

  <div class="container">
    <div class="section">
      <h2>üöÄ Quick Actions</h2>
      <div class="quick-actions">
        <button class="btn" onclick="analyzeCurrentPage()">
          üìä Analyze Current Page
        </button>
        <button class="btn" onclick="quickSearch()">
          üîç Quick College Search
        </button>
        <button class="btn secondary" onclick="openComparison()">
          ‚öñÔ∏è Compare Colleges
        </button>
        <button class="btn outline" onclick="openDashboard()">
          üìà Full Dashboard
        </button>
      </div>
    </div>

    <div class="section">
      <h2>üìä Your Progress</h2>
      <div class="stats-grid">
        <div class="stat-card">
          <div class="stat-value" id="savedColleges">0</div>
          <div class="stat-label">Saved</div>
        </div>
        <div class="stat-card">
          <div class="stat-value" id="analyzedColleges">0</div>
          <div class="stat-label">Analyzed</div>
        </div>
        <div class="stat-card">
          <div class="stat-value" id="comparingColleges">0</div>
          <div class="stat-label">Comparing</div>
        </div>
        <div class="stat-card">
          <div class="stat-value" id="appliedColleges">0</div>
          <div class="stat-label">Applied</div>
        </div>
      </div>
    </div>

    <div class="section">
      <h2>üè´ Recent Activity</h2>
      <input type="text" class="search-box" id="collegeSearch" placeholder="Search your colleges...">
      
      <div class="loading" id="loading">
        <div class="spinner"></div>
        <div>Loading colleges...</div>
      </div>
      
      <div class="college-list" id="collegeList">
        <div class="empty-state">
          <div class="empty-state-icon">üè´</div>
          <div>No colleges yet!</div>
          <div style="font-size: 12px; margin-top: 8px;">Start by analyzing college pages</div>
        </div>
      </div>
    </div>

    <div class="section">
      <h2>‚öôÔ∏è Quick Settings</h2>
      <div class="feature-toggle">
        <div class="toggle-switch" id="autoAnalyze" onclick="toggleFeature('autoAnalyze')">
          <div class="toggle-slider"></div>
        </div>
        <label>Auto-analyze college pages</label>
      </div>
      <div class="feature-toggle">
        <div class="toggle-switch" id="notifications" onclick="toggleFeature('notifications')">
          <div class="toggle-slider"></div>
        </div>
        <label>Enable notifications</label>
      </div>
      <div class="feature-toggle">
        <div class="toggle-switch active" id="smartRecommendations" onclick="toggleFeature('smartRecommendations')">
          <div class="toggle-slider"></div>
        </div>
        <label>Smart recommendations</label>
      </div>
    </div>
  </div>

  <script>
    // Initialize the side panel
    document.addEventListener('DOMContentLoaded', function() {
      loadCollegeData();
      detectCurrentPage();
      loadSettings();
      setupSearch();
    });

    // Function to analyze current page
    async function analyzeCurrentPage() {
      try {
        const [tab] = await chrome.tabs.query({active: true, currentWindow: true});
        
        // Show loading state
        document.getElementById('loading').style.display = 'block';
        
        // Send message to content script
        await chrome.tabs.sendMessage(tab.id, {action: 'analyze'});
        
        // Update UI
        setTimeout(() => {
          document.getElementById('loading').style.display = 'none';
          updateStats();
        }, 2000);
        
      } catch (error) {
        console.error('Error analyzing page:', error);
        document.getElementById('loading').style.display = 'none';
      }
    }

    // Function to open comparison tool
    function openComparison() {
      chrome.tabs.create({url: chrome.runtime.getURL('compare.html')});
    }

    // Function to open full dashboard
    function openDashboard() {
      chrome.tabs.create({url: chrome.runtime.getURL('analyzer.html')});
    }

    // Function for quick college search
    function quickSearch() {
      const query = prompt('Enter college name to search:');
      if (query) {
        chrome.tabs.create({url: `https://www.google.com/search?q=${encodeURIComponent(query + ' college')}`});
      }
    }

    // Load college data from storage
    async function loadCollegeData() {
      try {
        const result = await chrome.storage.sync.get([
          'savedColleges', 
          'analyzedColleges', 
          'recentColleges',
          'comparingColleges',
          'appliedColleges'
        ]);
        
        updateStats(result);
        updateCollegeList(result.recentColleges || []);
        
      } catch (error) {
        console.error('Error loading college data:', error);
      }
    }

    // Update statistics display
    function updateStats(data = {}) {
      document.getElementById('savedColleges').textContent = (data.savedColleges || []).length;
      document.getElementById('analyzedColleges').textContent = (data.analyzedColleges || []).length;
      document.getElementById('comparingColleges').textContent = (data.comparingColleges || []).length;
      document.getElementById('appliedColleges').textContent = (data.appliedColleges || []).length;
    }

    // Update college list display
    function updateCollegeList(colleges) {
      const container = document.getElementById('collegeList');
      
      if (!colleges || colleges.length === 0) {
        container.innerHTML = `
          <div class="empty-state">
            <div class="empty-state-icon">üè´</div>
            <div>No colleges yet!</div>
            <div style="font-size: 12px; margin-top: 8px;">Start by analyzing college pages</div>
          </div>
        `;
        return;
      }
      
      container.innerHTML = colleges.map(college => `
        <div class="college-item" onclick="openCollege('${college.url}')">
          <div class="college-info">
            <div class="college-name">${college.name}</div>
            <div class="college-location">${college.location || 'Location unknown'}</div>
          </div>
          <div class="college-status status-${college.status.toLowerCase()}">${college.status}</div>
        </div>
      `).join('');
    }

    // Open college page
    function openCollege(url) {
      if (url) {
        chrome.tabs.create({url: url});
      }
    }

    // Detect if current page is a college page
    async function detectCurrentPage() {
      try {
        const [tab] = await chrome.tabs.query({active: true, currentWindow: true});
        const url = tab.url;
        
        const collegeKeywords = [
          'college', 'university', 'usnews.com/best-colleges',
          'niche.com/colleges', 'collegeboard.org', 'princetonreview.com'
        ];
        
        const isCollegePage = collegeKeywords.some(keyword => 
          url.toLowerCase().includes(keyword)
        );
        
        if (isCollegePage) {
          document.getElementById('pageDetector').classList.add('active');
          document.getElementById('detectedCollege').textContent = 
            `${tab.title.split(' - ')[0]} ready for analysis`;
        }
        
      } catch (error) {
        console.error('Error detecting page:', error);
      }
    }

    // Setup search functionality
    function setupSearch() {
      const searchBox = document.getElementById('collegeSearch');
      searchBox.addEventListener('input', function(e) {
        const query = e.target.value.toLowerCase();
        const collegeItems = document.querySelectorAll('.college-item');
        
        collegeItems.forEach(item => {
          const collegeName = item.querySelector('.college-name').textContent.toLowerCase();
          const collegeLocation = item.querySelector('.college-location').textContent.toLowerCase();
          
          if (collegeName.includes(query) || collegeLocation.includes(query)) {
            item.style.display = 'flex';
          } else {
            item.style.display = 'none';
          }
        });
      });
    }

    // Toggle feature settings
    function toggleFeature(featureId) {
      const toggle = document.getElementById(featureId);
      toggle.classList.toggle('active');
      
      // Save setting
      const isActive = toggle.classList.contains('active');
      chrome.storage.sync.set({[featureId]: isActive});
      
      console.log(`${featureId} ${isActive ? 'enabled' : 'disabled'}`);
    }

    // Load settings
    async function loadSettings() {
      try {
        const result = await chrome.storage.sync.get([
          'autoAnalyze', 'notifications', 'smartRecommendations'
        ]);
        
        Object.keys(result).forEach(key => {
          const toggle = document.getElementById(key);
          if (toggle && result[key]) {
            toggle.classList.add('active');
          }
        });
        
      } catch (error) {
        console.error('Error loading settings:', error);
      }
    }

    // Listen for storage changes to update UI in real-time
    chrome.storage.onChanged.addListener((changes, namespace) => {
      if (namespace === 'sync') {
        loadCollegeData();
      }
    });

    // Listen for tab changes to update page detection
    chrome.tabs.onActivated.addListener(() => {
      detectCurrentPage();
    });

    chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {
      if (changeInfo.status === 'complete') {
        detectCurrentPage();
      }
    });
  </script>
</body>
</html>
